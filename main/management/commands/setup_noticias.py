from django.core.management.base import BaseCommand
from django.contrib.auth import get_user_model
from main.models import NoticiaCategoria, NoticiaTag, Poder

User = get_user_model()

class Command(BaseCommand):
    help = 'Configura dados b√°sicos para o sistema de not√≠cias'

    def handle(self, *args, **options):
        self.stdout.write('Configurando sistema de not√≠cias...')
        
        # Criar poder Imprensa se n√£o existir
        imprensa, created = Poder.objects.get_or_create(nome='Imprensa')
        if created:
            self.stdout.write(
                self.style.SUCCESS(f'‚úì Poder "Imprensa" criado com sucesso')
            )
        else:
            self.stdout.write(f'‚Ä¢ Poder "Imprensa" j√° existe')
        
        # Criar categorias padr√£o
        categorias_padrao = [
            {
                'nome': 'Pol√≠tica',
                'icone': 'fas fa-landmark',
                'cor': '#dc3545'
            },
            {
                'nome': 'Economia',
                'icone': 'fas fa-chart-line',
                'cor': '#28a745'
            },
            {
                'nome': 'Seguran√ßa',
                'icone': 'fas fa-shield-alt',
                'cor': '#007bff'
            },
            {
                'nome': 'Educa√ß√£o',
                'icone': 'fas fa-graduation-cap',
                'cor': '#6f42c1'
            },
            {
                'nome': 'Sa√∫de',
                'icone': 'fas fa-heartbeat',
                'cor': '#e83e8c'
            },
            {
                'nome': 'Tecnologia',
                'icone': 'fas fa-microchip',
                'cor': '#17a2b8'
            },
            {
                'nome': 'Esportes',
                'icone': 'fas fa-futbol',
                'cor': '#fd7e14'
            },
            {
                'nome': 'Cultura',
                'icone': 'fas fa-theater-masks',
                'cor': '#6610f2'
            }
        ]
        
        for categoria_data in categorias_padrao:
            categoria, created = NoticiaCategoria.objects.get_or_create(
                nome=categoria_data['nome'],
                defaults={
                    'icone': categoria_data['icone'],
                    'cor': categoria_data['cor'],
                    'descricao': f'Not√≠cias relacionadas a {categoria_data["nome"].lower()}'
                }
            )
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì Categoria "{categoria.nome}" criada')
                )
            else:
                self.stdout.write(f'‚Ä¢ Categoria "{categoria.nome}" j√° existe')
        
        # Criar tags padr√£o
        tags_padrao = [
            'governo', 'brasil', 'roblox', 'roleplay', 'pol√≠tica', 'economia',
            'seguran√ßa', 'educa√ß√£o', 'sa√∫de', 'tecnologia', 'esportes', 'cultura',
            'not√≠cia', 'comunicado', 'an√∫ncio', 'decreto', 'lei', 'portaria'
        ]
        
        for tag_nome in tags_padrao:
            tag, created = NoticiaTag.objects.get_or_create(nome=tag_nome)
            if created:
                self.stdout.write(
                    self.style.SUCCESS(f'‚úì Tag "{tag.nome}" criada')
                )
            else:
                self.stdout.write(f'‚Ä¢ Tag "{tag.nome}" j√° existe')
        
        self.stdout.write(
            self.style.SUCCESS('\nüéâ Sistema de not√≠cias configurado com sucesso!')
        )
        self.stdout.write('\nPr√≥ximos passos:')
        self.stdout.write('1. Crie um usu√°rio com cargo na Imprensa para poder criar not√≠cias')
        self.stdout.write('2. Acesse /noticias/criar/ para criar sua primeira not√≠cia')
        self.stdout.write('3. Configure permiss√µes adicionais no Django Admin se necess√°rio') 