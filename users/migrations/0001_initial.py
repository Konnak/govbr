# Generated by Django 4.2.7 on 2025-06-17 00:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nome_completo_rp', models.CharField(max_length=100, verbose_name='Nome Completo (RP)')),
                ('roblox_id', models.BigIntegerField(unique=True, verbose_name='ID do Roblox')),
                ('roblox_username', models.CharField(blank=True, max_length=50, verbose_name='Username do Roblox')),
                ('nivel_acesso', models.CharField(choices=[('imigrante', 'Imigrante'), ('cidadao', 'Cidadão'), ('moderador', 'Moderador'), ('administrador', 'Administrador'), ('coordenador', 'Coordenador'), ('fundador', 'Fundador')], default='imigrante', max_length=20, verbose_name='Nível de Acesso')),
                ('verificado', models.BooleanField(default=False, verbose_name='Conta Verificada')),
                ('codigo_verificacao', models.CharField(blank=True, max_length=10, verbose_name='Código de Verificação')),
                ('data_verificacao', models.DateTimeField(blank=True, null=True, verbose_name='Data de Verificação')),
                ('discord_id', models.BigIntegerField(blank=True, null=True, verbose_name='ID do Discord')),
                ('discord_username', models.CharField(blank=True, max_length=50, verbose_name='Username do Discord')),
                ('discord_vinculado', models.BooleanField(default=False, verbose_name='Discord Vinculado')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('biografia', models.TextField(blank=True, verbose_name='Biografia')),
                ('avatar_url', models.URLField(blank=True, verbose_name='URL do Avatar')),
                ('data_ultimo_login', models.DateTimeField(blank=True, null=True, verbose_name='Último Login')),
                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='SolicitacaoCidadania',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('motivo', models.TextField(verbose_name='Motivo da Solicitação')),
                ('documentos', models.FileField(blank=True, null=True, upload_to='cidadania/', verbose_name='Documentos Anexos')),
                ('status', models.CharField(choices=[('pendente', 'Pendente'), ('aprovada', 'Aprovada'), ('rejeitada', 'Rejeitada')], default='pendente', max_length=20, verbose_name='Status')),
                ('data_solicitacao', models.DateTimeField(auto_now_add=True, verbose_name='Data da Solicitação')),
                ('data_resposta', models.DateTimeField(blank=True, null=True, verbose_name='Data da Resposta')),
                ('observacoes_staff', models.TextField(blank=True, verbose_name='Observações do Staff')),
                ('aprovado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aprovacoes_cidadania', to=settings.AUTH_USER_MODEL, verbose_name='Aprovado Por')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Solicitação de Cidadania',
                'verbose_name_plural': 'Solicitações de Cidadania',
                'ordering': ['-data_solicitacao'],
            },
        ),
        migrations.CreateModel(
            name='SolicitacaoAlteracaoNome',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome_atual', models.CharField(max_length=100, verbose_name='Nome Atual')),
                ('nome_solicitado', models.CharField(max_length=100, verbose_name='Nome Solicitado')),
                ('motivo', models.TextField(verbose_name='Motivo da Alteração')),
                ('status', models.CharField(choices=[('pendente', 'Pendente'), ('aprovada', 'Aprovada'), ('rejeitada', 'Rejeitada')], default='pendente', max_length=20, verbose_name='Status')),
                ('data_solicitacao', models.DateTimeField(auto_now_add=True, verbose_name='Data da Solicitação')),
                ('data_resposta', models.DateTimeField(blank=True, null=True, verbose_name='Data da Resposta')),
                ('observacoes_staff', models.TextField(blank=True, verbose_name='Observações do Staff')),
                ('aprovado_por', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='aprovacoes_nome', to=settings.AUTH_USER_MODEL, verbose_name='Aprovado Por')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Solicitação de Alteração de Nome',
                'verbose_name_plural': 'Solicitações de Alteração de Nome',
                'ordering': ['-data_solicitacao'],
            },
        ),
        migrations.CreateModel(
            name='LogAcesso',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ip_address', models.GenericIPAddressField(verbose_name='Endereço IP')),
                ('user_agent', models.TextField(verbose_name='User Agent')),
                ('data_acesso', models.DateTimeField(auto_now_add=True, verbose_name='Data do Acesso')),
                ('sucesso', models.BooleanField(default=True, verbose_name='Login com Sucesso')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Usuário')),
            ],
            options={
                'verbose_name': 'Log de Acesso',
                'verbose_name_plural': 'Logs de Acesso',
                'ordering': ['-data_acesso'],
            },
        ),
    ]
