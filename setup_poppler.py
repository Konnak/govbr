#!/usr/bin/env python3
"""
Script para configurar Poppler no Windows
Este script baixa e configura o Poppler para permitir convers√£o de PDF para imagem
"""

import os
import sys
import urllib.request
import zipfile
import shutil
from pathlib import Path

def download_poppler():
    """Baixa e configura o Poppler para Windows"""
    
    print("üîÑ Configurando Poppler para Windows...")
    
    # URLs para diferentes arquiteturas
    poppler_url = "https://github.com/oschwartz10612/poppler-windows/releases/download/v23.01.0-0/Release-23.01.0-0.zip"
    
    # Diret√≥rios
    project_dir = Path(__file__).parent
    poppler_dir = project_dir / "poppler"
    poppler_zip = project_dir / "poppler.zip"
    
    try:
        # Limpar diret√≥rio existente
        if poppler_dir.exists():
            shutil.rmtree(poppler_dir)
            
        # Baixar Poppler
        print("üì• Baixando Poppler...")
        urllib.request.urlretrieve(poppler_url, poppler_zip)
        print("‚úÖ Download conclu√≠do!")
        
        # Extrair
        print("üìÇ Extraindo arquivos...")
        with zipfile.ZipFile(poppler_zip, 'r') as zip_ref:
            zip_ref.extractall(poppler_dir)
        
        # Encontrar o diret√≥rio bin
        bin_dirs = list(poppler_dir.rglob("**/bin"))
        if not bin_dirs:
            raise Exception("Diret√≥rio bin n√£o encontrado no Poppler")
            
        poppler_bin = bin_dirs[0]
        print(f"üìÅ Poppler extra√≠do em: {poppler_bin}")
        
        # Adicionar ao PATH do sistema (tempor√°rio para esta sess√£o)
        current_path = os.environ.get('PATH', '')
        if str(poppler_bin) not in current_path:
            os.environ['PATH'] = f"{poppler_bin};{current_path}"
            print("‚úÖ Poppler adicionado ao PATH!")
        
        # Testar instala√ß√£o
        print("üß™ Testando instala√ß√£o...")
        test_command = f'"{poppler_bin / "pdftoppm.exe"}" -h'
        result = os.system(test_command + " >nul 2>&1")
        
        if result == 0:
            print("‚úÖ Poppler configurado com sucesso!")
            
            # Criar arquivo de configura√ß√£o
            config_file = project_dir / "poppler_config.py"
            with open(config_file, 'w', encoding='utf-8') as f:
                f.write(f'''# Configura√ß√£o do Poppler
POPPLER_PATH = r"{poppler_bin}"

# Adicionar ao PATH se necess√°rio
import os
if POPPLER_PATH not in os.environ.get('PATH', ''):
    os.environ['PATH'] = f"{POPPLER_PATH};{{os.environ.get('PATH', '')}}"
''')
            print(f"üìù Arquivo de configura√ß√£o criado: {config_file}")
            
        else:
            print("‚ùå Erro ao testar Poppler")
            return False
            
        # Limpar arquivo zip
        if poppler_zip.exists():
            poppler_zip.unlink()
            
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao configurar Poppler: {e}")
        return False

def check_poppler():
    """Verifica se o Poppler est√° dispon√≠vel"""
    try:
        from pdf2image import convert_from_path
        # Tentar importar - se n√£o der erro, est√° funcionando
        print("‚úÖ Poppler j√° est√° dispon√≠vel!")
        return True
    except Exception as e:
        print(f"‚ùå Poppler n√£o dispon√≠vel: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ Configurador do Poppler para Windows")
    print("=" * 50)
    
    if not check_poppler():
        print("\nüîß Poppler n√£o encontrado. Iniciando instala√ß√£o...")
        if download_poppler():
            print("\nüéâ Configura√ß√£o conclu√≠da com sucesso!")
            print("\nüìã Pr√≥ximos passos:")
            print("1. Reinicie o servidor Django")
            print("2. Teste a gera√ß√£o de PDF com anexos")
        else:
            print("\nüí• Falha na configura√ß√£o do Poppler")
            sys.exit(1)
    else:
        print("\n‚úÖ Poppler j√° est√° configurado corretamente!") 